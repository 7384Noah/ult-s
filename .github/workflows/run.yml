name: rust_build
on: 
  pull_request:
    branches:
      - main

jobs:
  pr_build:
    env:
      PLUGIN_NAME: plugin
    runs-on: ubuntu-latest
    container: 
      image: jugeeya/cargo-skyline:3.0.0-dkp-beta
    steps:
    - name: setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' 
    
    - name: checkout version
      uses: actions/checkout@v2

    # build the project
    - run: |
        export PATH=$PATH:/root/.cargo/bin:/opt/devkitpro/devkitA64/bin \
        && cd scripts && python3 build.py
      env:
        HOME: /root
    - name: Upload plugin
      uses: actions/upload-artifact@v3
      env:
        HOME: /root
      with:
        name: plugin
        path: releases

  pr_comment:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    steps:
      - uses: actions/github-script@v3
        with:
          script: |
            const {owner, repo} = context.repo;
            const run_id = ${{github.event.workflow_run.id}};
            const pull_head_sha = '${{github.event.workflow_run.head_sha}}';
            const issue_number = await (async () => {
              const pulls = await github.pulls.list({owner, repo});
              for await (const {data} of github.paginate.iterator(pulls)) {
                for (const pull of data) {
                  if (pull.head.sha === pull_head_sha) {
                    return pull.number;
                  }
                }
              }
            })();
            if (issue_number) {
              core.info(`Using pull request ${issue_number}`);
            } else {
              return core.error(`No matching pull request found`);
            }
            const {data: {artifacts}} = await github.actions.listWorkflowRunArtifacts({owner, repo, run_id});
            if (!artifacts.length) {
              return core.error(`No artifacts found`);
            }
            let body = `Download the artifacts for this pull request:\n`;
            for (const art of artifacts) {
              body += `\n* [${art.name}](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
            }
            const {data: comments} = await github.issues.listComments({repo, owner, issue_number});
            const existing_comment = comments.find((c) => c.user.login === 'github-actions[bot]');
            if (existing_comment) {
              core.info(`Updating comment ${existing_comment.id}`);
              await github.issues.updateComment({repo, owner, comment_id: existing_comment.id, body});
            } else {
              core.info(`Creating a comment`);
              await github.issues.createComment({repo, owner, issue_number, body});
            }
